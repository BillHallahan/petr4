Title : Petr4 Semantics
Title Note: version 0.0.1
Title Footer: &date;
Author: The Petr4 Team
Heading depth: 5
Pdf Latex: xelatex
Document Class: [11pt]article
Package: [top=1in, bottom=1.25in, left=1in, right=1in]geometry
Package: fancyhdr
Package: mathpartir
Package: textcomp
Package: mathtools
Package: xspace

.mathpre {
  replace: "/( +)\|-( +)/\1\vdash{}\2/g";
  replace: "/( +)-\|( +)/\1\dashv{}\2/g";
  replace: "/-\>/\to{}/g";
  replace: "/\bG([^a-zA-Z])/\Gamma{}\1/g";
  replace: "/\bD([^a-zA-Z])/\Delta{}\1/g";
  replace: "/\bS([^a-zA-Z])/\Sigma{}\1/g";
  replace: "/\bt([^a-z])/\tau{}\1/g";
  replace: "/</\langle{}/g";
  replace: "/>/\rangle{}/g";
  replace: "/\b:=\b/\coloneqq{}/g";
}

Infer {
  replace:"/(\n|^)\n *----+ *\[([^\]]*)\] *\n([\s\S]*)/\
           \\infer{{}}{\3}{\textsc{\2}}/m";
  replace:"/([\s\S]*?)\n *----+ *\[([^\]]*)\] *\n([\s\S]*)/\
           \\infer{\1}{\3}{\textsc{\2}}/m";
  replace:"~ Begin MathPre {.infer}&nl;&nl;&source;&nl;\
           ~ End MathPre";
}

Tex Header:
  \setlength{\headheight}{30pt}
  \renewcommand{\footrulewidth}{0.5pt}

@if html {
body.madoko {
  font-family: utopia-std, serif;
}
title,titlenote,titlefooter,authors,h1,h2,h3,h4,h5 {
  font-family: helvetica, sans-serif;
  font-weight: bold;
}
pre, code {
  language: p4;
  font-family: monospace;
  font-size: 10pt;
}
}

@if tex {
body.madoko {
  font-family: UtopiaStd-Regular;
}
title,titlenote,titlefooter,authors {
  font-family: sans-serif;
  font-weight: bold;
}
pre, code {
  language: p4;
  font-family: LuxiMono;
  font-size: 75%;
}
}

Colorizer: p4
.token.keyword    {
    font-weight: bold;
}

@if html {
p4example {
  replace: "~ Begin P4ExampleBlock&nl;\
                 ````&nl;&source;&nl;````&nl;\
                 ~ End P4ExampleBlock";
  padding:6pt;
  margin-top: 6pt;
  margin-bottom: 6pt;
  border: solid;
  background-color: #ffffdd;
  border-width: 0.5pt;
}
}

@if tex {
p4example {
  replace: "~ Begin P4ExampleBlock&nl;\
                 ````&nl;&source;&nl;````&nl;\
                 ~ End P4ExampleBlock";
  breakable: true;
  padding: 6pt;
  margin-top: 6pt;
  margin-bottom: 6pt;
  border: solid;
  background-color: #ffffdd;
  border-width: 0.5pt;
}
}


@if html {
p4pseudo {
  replace: "~ Begin P4PseudoBlock&nl;\
                 ````&nl;&source;&nl;````&nl;\
                 ~ End P4PseudoBlock";
  padding: 6pt;
  margin-top: 6pt;
  margin-bottom: 6pt;
  border: solid;
  background-color: #e9fce9;
  border-width: 0.5pt;
}
}

@if tex {
p4pseudo {
  replace: "~ Begin P4PseudoBlock&nl;\
                 ````&nl;&source;&nl;````&nl;\
                 ~ End P4PseudoBlock";
  breakable : true;
  padding: 6pt;
  margin-top: 6pt;
  margin-bottom: 6pt;
  background-color: #e9fce9;
  border: solid;
  border-width: 0.5pt;
}
}

@if html {
p4grammar {
  replace: "~ Begin P4GrammarBlock&nl;\
                 ````&nl;&source;&nl;````&nl;\
                 ~ End P4GrammarBlock";
  border: solid;
  margin-top: 6pt;
  margin-bottom: 6pt;
  padding: 6pt;
  background-color: #e6ffff;
  border-width: 0.5pt;
}
}

@if tex {
p4grammar {
  replace: "~ Begin P4GrammarBlock&nl;\
                 ````&nl;&source;&nl;````&nl;\
                 ~ End P4GrammarBlock";
  breakable: true;
  margin-top: 6pt;
  margin-bottom: 6pt;
  padding: 6pt;
  background-color: #e6ffff;
  border: solid;
  border-width: 0.5pt;
}
}

p4mathgrammar {
  replace:"/\/\/(.*)/\/\/ &\text{\1}/g";
  replace: "~ Begin P4MathGrammarBlock&nl;\
                 ~ Begin MathPre&nl;&source;&nl;~ End MathPre&nl;\
                 ~ End P4MathGrammarBlock";
  breakable: true;
  margin-top: 6pt;
  margin-bottom: 6pt;
  padding: 6pt;
  background-color: #e6ffff;
  border: solid;
  border-width: 0.5pt;
}

[TITLE]

~ Begin Abstract
The goal of the Petr4 project is to define a formal semantics for the
P4 Programming Language.
~ End Abstract

[TOC]

# Introduction { #sec-introduction }
# Syntax { #sec-syntax }

## Expressions

~ Begin P4MathGrammar
e ::= @true
    | @false
    | a // arbitrary width integer literal
    | nwa // unsigned integer literal
    | nsa // signed integer literal
    | u // strings
    | x // name
    | .x // top level name
    | e1[e2] // array access
    | e1[e2:e3] // bitslice
    | {e1,...,en} // list
    | uop e
    | e1 binop e2
    | (t) e // explicit cast
    | X.name // type member
    | @error.name // errors
    | e.name // expression member
    | e1 ? e2 : e3 // ternary operator
    | f<\overline{t}>(\overline{e}) // function call (positional)
    | f<\overline{t}>(\overline{x=e}) // function call (named)
    | t(\overline{e}) // nameless instantiation
    | e1 \texttt{\&\&\&} e2 // mask
    | e1 .. e2 // range
~ End P4MathGrammar

~ Begin P4Grammar
// unary operators
uop ::= ! // not
      | - // unary minus
      | ~ // bitwise complement/not

// binary operators
binop ::= +
        | |+|
        | -
        | |-|
        | *
        | /
        | %
        | <<
        | >>
        | <
        | >
        | <=
        | >=
        | ==
        | !=
        | &
        | ^
        | |
        | ++
        | &&
        | ||
~ End P4Grammar

## Statements and blocks
~ Begin P4MathGrammar
s ::= e<\overline{t}>(\overline{e})     // method calls (positional)
    | e<\overline{t}>(\overline{x=e})   // method calls (named)
    | e := e                            // assignment
    | t.@apply(e_1,...,e_n)             // direct type invocation
    | @if (e) s_1 @else s_2             // conditional statement
    | blk                               // block statement
    | @exit                             // exit statement (only in controls)
    | \mathkw{;}                        // empty statement
    | @return                           // return (void)
    | @return e                         // return (with value)
    | @switch (e) \{ \overline{case} \} // switch statement
    | decl                              // declaration statement

case ::= case\_lbl: blk  // label with block
       | case\_lbl: {}   // fallthrough 

case\_lbl ::= x                // name (of action)
            | \texttt{default} // catch-all label

blk ::= \{ s_1; ... s_n; \} // blocks
~ End P4MathGrammar

## Declarations
~ Begin P4MathGrammar
decl ::= @const t x:=e
       | t x(\overline{e})
       | t x(\overline{e}) blk
       | @parser X(\overline{x:t,d})(\overline{x:t}) \{ \overline{decl} \overline{state} \}
       | @control X(\overline{x:t,d})(\overline{x:t}) \{ \overline{decl} @apply blk \}
       | @function t x<\overline{X}>(\overline{x:t,d}) blk
       | \mathkw{extern\ function} t x<\overline{X}>(\overline{x:t,d})
       | t x
       | t x := e
       | \mathkw{value\_set}<t>(e) x
       | @action x (\overline{x:t,d_0},\overline{x:t}) blk
       | @table x \{ \overline{prop} \}
       | @header X \{ \overline{x:t} \}
       | \mathkw{header\ union} X \{ \overline{x:t} \}
       | @struct X \{ \overline{x:t} \}
       | @error \{ \overline{x} \}
       | \mathkw{match\_kind} \{ \overline{x} \}
       | @enum X \{ \overline{x} \}
       | @enum t X \{ \overline{x=e} \}
       | @extern X<\overline{X}> \{ \overline{ctor}\ \overline{method} \}
       | @typedef t X
       | @type t X
       | @control X<\overline{X}>(\overline{x:t,d})
       | @parser X<\overline{X}>(\overline{x:t,d})
       | @package X<\overline{X}>(\overline{x:t})

state ::= @state x \{ \overline{s}; @transition state\_expr \}

state\_expr ::= x
              | @select (\overline{e}) \{ \overline{matches:x} \}

matches = \overline{match}

match ::= \mathkw{\_}
        | e

ctor ::= X(\overline{x:t})

method ::= @abstract t x<\overline{X}>(\overline{x:t,d})
         | t x<\overline{X}>(\overline{x:t,d})

prop ::= @key = \{ \overline{e:x} \}
       | @actions = \{ \overline{action\_ref} \}
       | @const @entries = \{ \overline{matches:action\_ref} \}
       | x = e
       | @const x = e

action\_ref ::= x(\overline{e})
~ End P4MathGrammar

## Programs
A program is a sequence of declarations.
~ Begin P4MathGrammar
P ::= decl, P
    | ()
~ End P4MathGrammar

## Types

~ Begin P4MathGrammar
t ::= @bool
    | @string
    | @int
    | @int<w>
    | @bit<w>
    | @varbit<w>
    | t[a]
    | @tuple<\overline{t}>
    | \{ \overline{t} \}
    | @set<t>
    | @error
    | \mathkw{match\_kind}
    | X  // type name
    | .X // top level type reference
    | @newtype X t
    | @void
    | @header \{ \overline{f:t} \}
    | \mathkw{header\ union} \{ \overline{f:t} \}
    | @struct \{ \overline{f:t} \}
    | @enum X \{ \overline{x} \}
    | @enum t X \{ \overline{x=v} \}
    | t<\overline{t}> // specialized type
    | @package<\overline{X}>(\overline{x:t,d})
    | @control<\overline{X}>(\overline{x:t,d})
    | @parser<\overline{X}>(\overline{x:t})
    | @extern X \{ \overline{method} \}
    | @function<\overline{X}>(\overline{x:t}) : \tau
    | \mathkw{extern\ function} x<\overline{X}>(\overline{x:t,d}):t
    | @action(\overline{x:t,d_0}, \overline{x:t}) : @void
    | @constructor<\overline{X}>(\overline{x:t}): t
    | @table (...)

d0 ::= @in
     | @out
     | @inout

d ::= d0 | @none
~ End P4MathGrammar

Signals are types for statements.
~ P4MathGrammar
sig := @returns // written ``Void" in the implementation
     | \bot     // written ``Unit" in the implementation
~

Contexts indicate where a statement is being typechecked.
~ P4MathGrammar
ctx ::= @InFunction t
      | @InControl
      | @InParser
      | @InAction
~

## Values

<!--
TODO:
- lvalues?
- lists vs tuples
-->
We assume the existence of the sets $name$ and $loc$, for variable names and memory locations respectively.

$a \in \mathbb{Z}$

$n \in \mathbb{N}$

$\mathbb{Z}_n ::= m \% 2^n | m \in \mathbb{Z}$

$m_u^n \in \mathbb{Z}_n$

$m_s^n \in \mathbb{Z}_{n-1} \cup \{ -x | x \in \mathbb{Z}_n\}$

Values
~ Begin P4MathGrammar
v ::= b // booleans
    | a // arbitrary-width integers
    | m_u^n // unsigned integers, n not zero
    | m_s^n // signed integers, n not zero
    | (n, m_u^{n'}) // variable-size bitstrings, n less than n'
    | u // strings
    | (v1,...,vn) // tuples
    | @set // sets
    | @error.name // errors
    | (p1,...,pn) \Rightarrow blck // functions, actions
    | name // builtin functions
    | @struct \{ \overline{(name, v)} \}
    | (@header \{ \overline{(name, v)} \}, b)
    | (\mathkw{header\ union} \{ \overline{(name, b)} \}, v)
    | (v1,...,vn, n1, n2) // stacks
    | name1.name2 // enumfield
    | (name1.name2, v) // senumfield
    | loc // stateful runtime
    | @parser (\overline{(name, v)}, \overline{p}, \overline{decl}, \overline{state})
    | @control (\overline{(name, v)}, \overline{p}, \overline{decl}, blck)
    | @package (\overline{(name, v)})
    | @table (name, \overline{v}, \overline{@action}, @action_default, \overline{@set})
    | @extern name
~ End P4MathGrammar

Sets
~ Begin P4MathGrammar
@set ::=  \_ // universal
    | v // singleton
    | v1 \texttt{\&\&\&} v2 // mask
    | v1 .. v2 // range
    | (@set1,...,@setn) // product
    | @lpm v // lpm
    | ?? // TODO: value set
~ End P4MathGrammar

Parameters
~ Begin P4MathGrammar
p ::= (d, \tau, v)
~ End P4MathGrammar

# Static Semantics { #sec-static }

## Typing contexts

All typing judgments include

1. $P$, the program seen so far,
2. $\Sigma$, the values of any compile-time-known constants,
3. $\Delta$, the definitions of type names in scope, and
4. $\Gamma$, the types of variables in scope.

Type variables are tracked by mapping type names $X$ to themselves in
the context $\Delta$. Equivalently there could be another context that
was a list of lists of type variables, without them being mapped to
anything. While $P$ is a list of declarations, it may also be treated
as a mapping from type names to declarations for those declarations
which have names.

~ MathPre
\sigma ::= \sigma, x=v | []

S ::= S, \sigma{} | []

\delta ::= \delta, X=t | []

D ::= D, \delta{} | []

\gamma ::= \gamma, x:t,d | []

G ::= G, \gamma{} | []
~

In all contexts there is a lookup test $C(x) = y$ which searches from
the outermost list of bindings inward and a top level lookup $C(.x) =
y$ which only looks at the innermost list of bindings.

## Typing judgments

### Helper Rules

~ MathPre
@numeric(t) = \begin{cases} true & t = int
true & t = int<w>
true & t = bit<w>
false & \text{otherwise}
\end{cases}
~

### Expression typing
#### Constants

~ Infer

------------------------[Bool-True]
 P,S,D,G |- @true : @bool, @none
~

~ Infer

------------------------[Bool-False]
 P,S,D,G |- @false : @bool, @none
~

~ Infer

------------------------[String]
 P,S,D,G |- u : @string, @none
~

~ Infer

------------------------[Int-Constant]
P,S,D,G |- a : @int, @none
~

~ Infer

------------------------[Signed-Int-Constant]
P,S,D,G |- nsa : @int<w>, @none
~

~ Infer

------------------------[Unsigned-Int-Constant]
P,S,D,G |- nwa : @bit<a>, @none
~

#### Variables

~ Infer
G(x) = t, d
-------------------[Var]
P,S,D,G |- x : t, d
~

~ Infer
G(.x) = t, d
----------------------[Var-Top]
P,S,D,G |- .x : t, d
~

#### Accesses

~ Infer
P,S,D,G |- e_1 : t_1[], d_1
P,S,D,G |- e_2  : t_2, \_
@numeric(t_2)
----------------------[Array-Access]
P,S,D,G |- e_1[e_2] : t_1, d_1
~

~ Infer
P,S,D,G |- e_1 : @bit<w>, d_1
P,S,D,G |- e_2  : t_2, \_
@numeric(t_2)
P,S,D,G |- e_3  : t_3, \_
@numeric(t_3)
0 \leq e_2
e_2 \lt w
e_2 \leq e_3
e_3 \lt w
------------------------[Slice]
P,S,D,G |- e1[e2:e3] : t_1, d_1
~

~ Infer
P,S,D,G |- \overline{e: \tau, none}
-----------------------------------------------[List-Expression]
P,S,D,G |- \{ \overline{e} \} : \{ \overline{\tau} \}, none
~

#### Unary Operations

~ Infer
P,S,D,G |- e : @bool, d
-------------------[Not]
P,S,D,G |- !e : @bool, d
~

~ Infer
P,S,D,G |- e : @bit<w>, d
-----------------------------[Bitwise-Not]
P,S,D,G |- {\texttt{\textasciitilde}e} : @bit<w>, d
~

~ Infer
P,S,D,G |- e : t, d
@numeric(t)
--------------------[Negate]
P,S,D,G |- {-e} : t, d
~

#### Binary Operations

```haskell
  fun binaryDir In In = In
    | binaryDir _  _  = none
```

~ Infer
P,S,D,G |- e_1 : @bool, d_1
P,S,D,G |- e_2 : @bool, d_2
\diamond \in \{ \&\&, || \}
------------------------------------------------------------------[Bool-Binary-Op]
P,S,D,G |- e_1 \mathbin{\diamond} e_2 : @bool, @binaryDir(d_1, d_2)
~

~ Infer
P,S,D,G |- e_1 : @int, d_1
P,S,D,G |- e_2 : @int, d_2
\diamond \in \{ +,-,*,<,>,\leq,\geq, /, \% \}
--------------------------------------------------------[Int-Binary-Op]
P,S,D,G |- e_1 \mathbin{\diamond} e_2 : @int, @binaryDir(d_1, d_2)
~

~ Infer
P,S,D,G |- e_1 : @int<w>, d_1
P,S,D,G |- e_2 : @int<w>, d_2
\diamond \in \{ +,-,*,<,>,\leq,\geq,|+|,|-| \}
-----------------------------------------------------------[Int-Signed-Binary-Op]
P,S,D,G |- e_1 \mathbin{\diamond} e_2 : @int<w>, @binaryDir(d_1, d_2)
~

<!--
having trouble with ^ symbol for xor
-->

~ Infer
P,S,D,G |- e_1 : @bit<w>, d_1
P,S,D,G |- e_2 : @bit<w>, d_2
\diamond \in \{ +,-,*,<,>,\leq,\geq,|+|,|-|,\&,\hat{},|,\oplus \}
----------------------------------------------------------[Int-Unsigned-Binary-Op]
P,S,D,G |- e_1 \mathbin{\diamond} e_2 : @bit<w>, @binaryDir(d_1, d_2)
~

<!--
need to define has_equality
-->

~ Infer
P,S,D,G |- e_1 : t, d_1
P,S,D,G |- e_2 : t, d_2
\mathkw{has\_equality}(t)
\diamond \in \{ ==,!= \}
----------------------------------------------------------[Equality-Op]
P,S,D,G |- e_1 \mathbin{\diamond} e_2 : @bool, @binaryDir(d_1, d_2)
~

~ Infer
P,S,D,G |- e_1 : @bit<l>, d_1
P,S,D,G |- e_2 : @bit<r>, d_2
---------------------------------[Bit-Concat-Op]
P,S,D,G |- e_1 \mathbin{++} e_2 : @bit<l+r>, @binaryDir(d_1, d_2)
~

~ Infer
P,S,D,G |- e_1 : t_1, d_1
P,S,D,G |- e_2 : t_2, d_2
@numeric(t_1)
t_2 = @bit<\_> \lor t_2 = @int
\diamond \in \{\ll, \gg\}
---------------------------------[Shift-Op]
P,S,D,G |- e_1 \mathbin{\diamond} e_2 : t_1, @binaryDir(d_1, d_2)
~

#### Casts

Casting from $\tau_0$ to $\tau$ is permitted by the
$\tau \prec \tau'$ judgment.

The equality sign here hasn't been defined and probably won't make
sense without adding a context for looking up variables and type
names.
~ Infer
t = t'
-------------------------------------------[]
t \mathrel{\prec} t'
~

~ Infer

---------------------[]
@int \mathrel{\prec} @int<w>
~
~ Infer

---------------------[]
@int \mathrel{\prec} @bit<w>
~

~ Infer

----------------------------------------------------[]
\{t_1, \dots, t_n\} \mathrel{\prec} @tuple<t_1, \dots, t_n>
~

~ Infer

----------------------------------------------------[]
\{t_1, \dots, t_n\} \mathrel{\prec} @header \{f_1: \tau_1, ..., f_n: \tau_n\}
~

~ Infer

----------------------------------------------------[]
\{t_1, \dots, t_n\} \mathrel{\prec} @struct \{f_1: \tau_1, ..., f_n: \tau_n\}
~

~ Infer

----------------------------------------------------[]
t \mathrel{\prec} @enum t X \{m_1, ..., m_n\}
~

~ Infer

-------------------------------------------[]
@enum t X \{m_1, ..., m_n\} \mathrel{\prec} t
~

~ Infer

-------------------------------[]
@newtype X t \mathrel{\prec} t
~

~ Infer

-------------------------------[]
t \mathrel{\prec} @newtype X t
~

~ Infer
P,S,D,G |- e : t_0, d
t_0 \prec t
------------------------[Cast]
P,S,D,G |- (t) e : t, d
~

#### Member expressions
~ Infer
D(X) = @enum t X \{m_1,\dots,m_n\}
---------------------------------------[Type-Member-Serializable-Enum]
P,S,D,G |- X.m_i:X,@none
~

~ Infer
D(X) = @enum X \{m_1,\dots,m_n\}
---------------------------------------[Type-Member-Enum]
P,S,D,G |- X.m_i:X,@none
~

~ Infer
G(@error.name) = @error
-------------------------------------[Error-Member]
P,S,D,G |- @error.name : error, @none
~

Field and method lookups on expressions are delegated to another
judgment $\mathkw{has\_field}\ t\ name\ t_{name}$.
~ Infer
P,S,D,G, |- e : t
\mathkw{has\_field} t name t_{name}
------------------------------------[Expression-Member]
P,S,D,G |- e.name : t_{name}
~

~ Infer

---------------------------------------------------------------------[Header-Field]
\mathkw{has\_field} (@header \{f_1:t_1, \dots, f_n:t_n\}) f_i t_i
~

~ Infer

--------------------------------------------------------------------------------[Header-Union-Field]
\mathkw{has\_field} (\mathkw{header\ union} \{f_1:t_1, \dots, f_n:t_n\}) f_i t_i
~

~ Infer

-------------------------------------------------------------------[Struct-Field]
\mathkw{has\_field} (@struct \{f_1:t_1, \dots, f_n:t_n\}) f_i t_i
~

~ Infer

---------------------------------------------------------------------------------[Header-IsValid-Field]
\mathkw{has\_field} (@header \{f_1:t_1, ... , f_n:t_n\}) @isValid (() -> @bool)
~

~ Infer

---------------------------------------------------------------------------------[Header-SetValid-Field]
\mathkw{has\_field} (@header \{f_1:t_1, ... , f_n:t_n\}) @setValid (() -> @void)
~

~ Infer

-----------------------------------------------------------------------------------[Header-SetInvalid-Field]
\mathkw{has\_field} (@header \{f_1:t_1, ... , f_n:t_n\}) @setInvalid (() -> @void)
~

~ Infer

---------------------------------------------------------------------------------------------[HeaderUnion-IsValid-Field]
\mathkw{has\_field} (\mathkw{header\ union} \{f_1:t_1, ... , f_n:t_n\}) @isValid (() -> @bool)
~


~ Infer

--------------------------------------------------------------------------------[Control-Apply-Field]
\mathkw{has\_field} (@control \{f_1:t_1, ... , f_n:t_n\}) @apply (() -> @void)
~

~ Infer

-------------------------------------------------------------------[Parser-Apply-Field]
\mathkw{has\_field} (@parser \{f_1:t_1, ... , f_n:t_n\}) @apply (() -> @void)
~

~ Infer
TODO
-------------------------------------------------------------------[Table-Apply-Field]
\mathkw{has\_field} (@table ...) @apply (() -> t_res)
~

~ Infer

-------------------------------------------------------------------[Array-Size-Field]
\mathkw{has\_field} t[a] @size @bit<32>
~

~ Infer

-------------------------------------------------------------------[Array-NextIndex-Field]
\mathkw{has\_field} t[a] @nextIndex @bit<32>
~

~ Infer

-------------------------------------------------------------------[Array-LastIndex-Field]
\mathkw{has\_field} t[a] @lastIndex @bit<32>
~

~ Infer

-------------------------------[Array-Next-Field]
\mathkw{has\_field} t[a] @next t
~

~ Infer

-------------------------------[Array-Last-Field]
\mathkw{has\_field} t[a] @last t
~

~ Infer

-------------------------------[Array-PushFront-Field]
\mathkw{has\_field} t[a] \mathkw{push\_front} ((count: @int) -> @void)
~

~ Infer

-------------------------------[Array-PopFront-Field]
\mathkw{has\_field} t[a] \mathkw{pop\_front} ((count: @int) -> @void)
~


#### Ternary Expression

~ Infer
P,S,D,G |- e_1 : @bool, \_
P,S,D,G |- e_2 : t, \_
P,S,D,G |- e_3 : t, \_
--------------------------------[Ternary-Op]
P,S,D,G |- e_1 ? e_2 : e_3 : t, @none
~

#### Function Calls
TODO: Check directions
TODO: Handle overloads of extern functions
~ Infer
P,S,D,G |- f : f<\overline{X}>(\overline{x:t,d}):t_{\mathsf{ret}}, \_
P,S,D[\overline{X \to \rho}],G \vdash \overline{e:t}
----------------------------------------------------------------------------[Function-Call-Nameless]
P,S,D,G |- f<\overline{\rho}>(\overline{e}):\tau_{\mathsf{ret}}, @none
~

~ Infer
P,S,D,G |- f : @function<...,X_i,...>(...,x_j:\tau_j,...) : \tau, \_
\forall j, \, P,S,D[\overline{X \to \rho}],G \vdash e_j:t_j
----------------------------------------------------------------------------[Function-Call-Named]
\Pi,\Gamma,\Delta |- f<...,\tau_i,...>(...,x_j=e_j,...) : \tau,@none
~

#### Nameless Instantiation

We need a function to resolve overloads.
~ Infer
t_{ctor} = @constructor<\overline{X}>(\overline{x:t}): t
@length \overline{x:t} = n
X:t_{ctor} \in G
---------------------------------------------------------[Resolve-Constructor-Overload]
\mathkw{resolve\_overload} G X n = t_{ctor}
~

~ Infer
@length \overline{e} = n
@length \overline{\rho} = @length \overline{X}
\mathkw{resolve\_overload} G Y n = @constructor<\overline{X}>(\overline{x:t}): t_{ret}
P,S,D[\overline{X \to \rho}],G \vdash \overline{e:t}
--------------------------------------------------------------------[Specialized-Type-Instantiation]
P,S,D,G |- Y<\overline{\rho}>(\overline{e}) : t_{ret}[\overline{\rho/X}]
~

~ Infer
P,S,D,G |- X<>(\overline{e}) : t
----------------------------------[Simple-Type-Instantiation]
P,S,D,G |- X(\overline{e}) : t
~

#### Set Operations

TODO: the Masks rule is based off of the spec
and diverges from the type checker's implementation

~ Infer
P,S,D,G |- e_1 : @bit<w>, \_
P,S,D,G |- e_2 : @bit<w>, \_
------------------------------------------------[Masks]
P,S,D,G |- e_1 \texttt{\&\&\&} e_2 : @set<@bit<w>>,@none
~

~ Infer
P,S,D,G |- e_1 : \tau, \_
P,S,D,G |- e_2 : \tau, \_
\tau = @bit<w> \lor \tau = @int<w>
-------------------------[Ranges]
P,S,D,G |- e_1\mathbin{..}e_2 : @set<\tau>, @none
~

## Statement typing

Statements are typed by a judgment of the form
~ MathPre
P,S,D,G,ctx |- s:sig -| G'.
~

The judgment is defined inductively by the following rules.

~ Infer
P,S,D,G |- e<t_1,\dots,t_n>(e_1,\dots,e_m):t
-------------------------------------------------------[Type-Stmt-Method-Call]
P,S,D,G,ctx |- e<t_1,\dots,t_n>(e_1,\dots,e_m):\bot -| G
~

TODO: LValues
~ Infer
\mathkw{lvalue}(e_l)
P,S,D,G |- e_l: t
P,S,D,G |- e_r: t
----------------------------[Type-Stmt-Assignment]
P,S,D,G,ctx |- e_l:=e_r:\bot -| G
~

~ Infer
P,S,D,G |- t().@apply(\overline{e}) : t'
----------------------------------------------[Type-Stmt-Direct-Application]
P,S,D,G,ctx |- t.@apply(\overline{e}):bot -| G
~

The $\wedge{}$ operator is $\mathkw{returns}$ if both of its arguments
are $\mathkw{returns}$ and $\bot$ otherwise. The $\vee{}$ operator is
$\mathkw{returns}$ if any of its arguments are $\mathkw{returns}$
and $\bot$ otherwise.
~ Infer
P,S,D,G |- e:@bool
P,S,D,G,ctx |- s_1:sig_1 -| G_1
P,S,D,G,ctx |- s_2:sig_2 -| G_2
----------------------------------------------[Type-Stmt-Conditional]
P,S,D,G,ctx |- @if (e) s_1 @else s_2:sig_1\wedge{}sig_2 -| G
~

We need another judgment for typing sequences $\overline{s}$ of
statements. (Sorry about the empty sequence notation in the first
rule...)

~ Infer

---------------------------------------------------[Type-Stmts-Empty]
P,S,D,G,ctx |- \overline{  } :\bot -| G
~

~ Infer
P,S,D,G,ctx  |- s:sig_1 -| G'
P,S,D,G',ctx |- \overline{s}:sig_2 -| G'
---------------------------------------------------[Type-Stmts-List]
P,S,D,G,ctx |- s;\overline{s}:sig_1 \vee sig_2 -| G
~

~ Infer
P,S,D,G,ctx |- \overline{s}:sig -| G'
---------------------------------------------------[Type-Stmt-Block]
P,S,D,G,ctx |- \{\overline{s}\}:sig -| G
~

~ Infer

---------------------------------------------------[Type-Stmt-Exit]
P,S,D,G,@InParserState |- @exit:@returns -| G
~

~ Infer

------------------------------------------[Type-Stmt-Empty]
P,S,D,G,ctx |- \mathkw{;}:\bot -| G
~

~ Infer
P,S,D,G |- e:t
---------------------------------------------------[Type-Stmt-Return-Value]
P,S,D,G,@InFunction t |- @return e:@returns -| G
~

~ Infer

---------------------------------------------------[Type-Stmt-Return-Void]
P,S,D,G,@InFunction @void |- @return:@returns -| G
~

~ Infer

---------------------------------------------------[Type-Stmt-Return-Control]
P,S,D,G,@InControl |- @return:@returns -| G
~

~ Infer

---------------------------------------------------[Type-Stmt-Return-Action]
P,S,D,G,@InAction |- @return:@returns -| G
~

~ Infer
P,S,D,G |- case\_lbl : \tau
P,S,D,G,@InControl |- blk:sig -| G'
---------------------------------------------------[Type-Case-Block]
P,S,D,G |- \mathkw{case\_ok}_\tau (case\_lbl:blk)
~

~ Infer
P,S,D,G |- case\_lbl : \tau
---------------------------------------------------[Type-Case-Fallthrough]
P,S,D,G |- \mathkw{case\_ok}_\tau (case\_lbl:{})
~

There isn't a real reason to track signals in controls, seeing as
controls only return void and there's no way for an apply block that
typechecks in all other respects to fail to not return a value. Seeing
as switch statements can only appear in controls, this rule just
assigns them the signal $\bot$ to avoid having to track signals in
each case and across fallthrough cases.
~ Infer
P,S,D,G |- e : @enum X \{ \overline{m} \}
\forall i. P,S,D,G |- \mathkw{case\_ok}_X case_i
--------------------------------------------------------------------------[Type-Stmt-Switch]
P,S,D,G,@InControl |- @switch (e) \{ case1, \dots, case_n \}:\bot -| G
~

TODO: DeclarationStatements don't need to exist, see
https://github.com/cornell-netlab/petr4/issues/5

The implementation makes sure decl is a constant, instantiation, or
variable, this rule doesn't bother.
~ Infer
P,S,D,G |- decl -| P',S',D',G'.
---------------------------------------------------[Type-Stmt-Declaration-Statement]
P,S,D,G,ctx |- decl:\bot -| G'
~

## Parser state typing

Parser states need their own typing judgment to deal with state-machine control flow. It has the form
~ MathPre
P,S,D,G,K |- state,
~
where K is a list of names of states used to check that the parser's
transitions make sense. It is defined by two rules, which use another
judgement $\mathkw{state\_expr\_ok}$.

~ Infer
P,S,D,G,K |- \mathkw{state\_expr\_ok} state\_expr
------------------------------------------------------[Type-State-Transition]
P,S,D,G,K |- @state x \{ ; @transition state\_expr \}
~

~ Infer
P,S,D,G |- s0 -| G'
P,S,D,G' |- \{ \overline{s}; @transition state\_expr \}
----------------------------------------------------------[Type-State-Statement]
P,S,D,G,K |- @state x \{ s0; \overline{s}; @transition state\_expr \}
~

The $\mathkw{state\_expr\_ok}$ judgment is defined by the following rules.
~ Infer
x\in{}K
-----------------------------------------------[State-Expr-OK-Direct]
G,K |- \mathkw{state\_expr\_ok} x
~

~ Infer
P,S,D,G |- \overline{e:t}
P,S,D,G |- \overline{\mathkw{match\_ok} t match}
\overline{x\in{}K}
-----------------------------------------------[State-Expr-OK-Select]
P,S,D,G,K |- \mathkw{state\_expr\_ok} @select (\overline{e}) \{ \overline{\overline{match}:x} \}
~

TODO: there should be implicit casts inserted in matches so that they always have set type.
TODO: Should matches be a separate kind of expression, or should we fold them into one type?
~ Infer
P,S,D,G |- e : @set t_m
t_m = t
----------------------------------------[Match-OK-Expr]
P,S,D,G |- \mathkw{match\_ok} t e
~

~ Infer

-------------------------------------------[Match-OK-DontCare]
P,S,D,G |- \mathkw{match\_ok} t \mathkw{\_}
~

## Declaration typing

Declarations are typed by a judgment of the form
~ MathPre
P,S,D,G |- decl -| S',D',G'.
~

It is defined inductively by the following rules.

~ Infer
P,S,D,G |- e:t
S, e \Downarrow v
--------------------------------------------[Type-Decl-Const]
P,S,D,G |- @const x := e -| S[x = v],D,G
~

~ Infer
P,S,D,G |- t(\overline{e}) : t_{inst}
-----------------------------------[Type-Decl-Instantiation]
P,S,D,G |- t x(\overline{e}) -| S,D,G[x:t_{inst}]
~

The function $\mathkw{names}(s_1, s_2, \dots)$ takes a list of states
and returns a list of their names.

~ Infer
K = @names(\overline{state}),@accept,@reject
@start \in K
P,S,D,G[\overline{x^{ctor}:t^{ctor}}][\overline{x:t}] |- \overline{decl} -| S',D',G'
P,S',D',G',K |- \overline{state}
t_{ctor} = @constructor(\overline{x^{ctor}:t^{ctor}}):@parser(\overline{x:t})
-------------------------------------------------------------------------------------------------------------[Type-Decl-Parser]
P,S,D,G |- @parser X(\overline{x:t,d})(\overline{x:t}) \{ \overline{decl} \overline{state} -| S,D,G[X:t_ctor]
~

~ Infer
P,S,D,G[\overline{x^{ctor}:t^{ctor}}][\overline{x:t}] |- \overline{decl} -| P',S',D',G'
P',S',D',G',@void |- blk -| G''
t_{ctor} = @constructor(\overline{x^{ctor}:t^{ctor}}):@control(\overline{x:t})
-------------------------------------------------------------------------------------------------------------------[Type-Decl-Control]
P,S,D,G |- @control X(\overline{x: t})(\overline{x^{ctor}:t^{ctor}}) \{ \overline{decl} @apply blk \} -| S,D,G[X:t_ctor]
~

~ Infer
P,S,D[\overline{X=X}],G[\overline{x:t}],t |- blk -| G_{blk}
G' = G[x:@function<\overline{X}>(\overline{x: t}) : t]
----------------------------------------------------[Type-Decl-Function]
P,S,D,G |- @function t x<\overline{X}>(\overline{x: t}) blk -| S,D,G'
~

~ Infer
G' = G[x:@function<\overline{X}>(\overline{x: t}) : t]
---------------------------------------------------------------[Type-Decl-Extern-Function]
P,S,D,G |- \mathkw{extern\ function} t x<\overline{X}>(\overline{x: t}) blk -| S,D,G'
~

~ Infer
t x := e
--------------------------------[Type-Decl-Variable]
P,S,D,G |- t x -| S,D,G[x:t]
~

~ Infer
P,S,D,G |- e:t
-------------------------------------[Type-Decl-Variable-Initialized]
P,S,D,G |- t x := e -| S,D,G[x:t]
~

~ Infer

-------------------------------------------------------[Type-Decl-Value-Set]
P,S,D,G |- \mathkw{value\_set}<t>(e) x -| S,D,G[x:@set t]
~

~ Infer
P,S,D[\overline{X=X}],G[\overline{x:t}],t |- blk -| G_{blk}
G' = G[x:@action<\overline{X}>(\overline{x:t,d0},\overline{x:t})]
-------------------------------------------------------------------------------[Type-Decl-Action]
P,S,D,G |- @action x<\overline{X}>(\overline{x:t,d_0},\overline{x:t}) blk -| S,D,G'
~

~ Infer
TODO
---------------------------------------------------[Type-Decl-Table]
TODO
~

~ Infer

-----------------------------------------------------------------------------------[Type-Decl-Header]
P,S,D,G |- @header X \{ \overline{x:t} \} -| S,D[X=@header \{ \overline{x:t} \}],G
~

~ Infer

----------------------------------------------------------------[Type-Decl-Header-Union]
P,S,D,G |- \mathkw{header\ union} X \{ \overline{x:t} \} -| S,D[X=\mathkw{header\ union} \{ \overline{x:t} \}],G
~

~ Infer

-------------------------------------------------------------------[Type-Decl-Struct]
P,S,D,G |- @struct X \{ \overline{x:t} \} -| S,D[X=@struct \{ \overline{f:t} \}],G
~

~ Infer
\overline{@error.x \notin G}
-----------------------------------------------------------[Type-Decl-Error]
P,S,D,G |- @error \{ \overline{x} \} -| S,D,G[\overline{@error.x:@error}]
~

~ Infer
\overline{.x \notin G}
---------------------------------------------------[Type-Decl-Match-Kind]
P,S,D,G |- \mathkw{match\_kind} \{ \overline{x} \} -| S,D,G[\overline{.x:\mathkw{match\_kind}}]
~

~ Infer
D' = D[X=@enum t X \{ \overline{x} \}]
\overline{e} \Downarrow \overline{v}
---------------------------------------------------[Type-Decl-Enum]
P,S,D,G |- @enum t X \{ \overline{x=e} \} -| S[\overline{x=v}],D,G
~

~ Infer
D' = D[X=@enum X \{ \overline{x} \}]
---------------------------------------------------[Type-Decl-Serializable-Enum]
P,S,D,G |- @enum X \{ \overline{x} \} -| S,D,G
~

~ Infer
\forall{}ctor_i=X(\overline{x:t}). {t_{ctor}}_i = @constructor<\overline{X}>(\overline{x_i:t_i}) : t_{extern}
t_{extern} = @extern X \{ \overline{method} \}
---------------------------------------------------[Type-Decl-Extern-Object]
P,S,D,G |- @extern X<\overline{X}> \{ \overline{ctor}\ \overline{method} \} -| S,D,G[\overline{X:t_{ctor}}]
~

~ Infer

---------------------------------------------------[Type-Decl-TypeDef]
P,S,D,G |- @typedef t X -| S,D[X=t],G
~

~ Infer

---------------------------------------------------[Type-Decl-TypeDef]
P,S,D,G |- @newtype t X -| S,D[X=@newtype X t],G
~

~ Infer
D'=D[X=@control<\overline{X}>(\overline{x:t,d})
--------------------------------------------------------------------[Type-Decl-Control-Type]
P,S,D,G |- @control X<\overline{X}>(\overline{x:t,d}) -| S,D',G
~

~ Infer
D'=D[X=@parser<\overline{X}>(\overline{x:t,d})
---------------------------------------------------[Type-Decl-Parser-Type]
P,S,D,G |- @parser X<\overline{X}>(\overline{x:t,d}) -| S,D',G
~

~ Infer
D'=D[X=@package<\overline{X}>(\overline{x:t})
-----------------------------------------------------------------[Type-Decl-Package-Type]
P,S,D,G |- @package X<\overline{X}>(\overline{x:t}) -| S,D',G
~

## Typing of programs
Partial programs are checked by a judgment of the form
~ MathPre
P,S,D,G |- P0 -| P',S',D',G'.
~
Complete programs are checked by giving empty contexts on the left.

The judgment only needs two rules.

~ Infer

--------------------------[]
P,S,D,G |- [] -| P,S,D,G
~

~ Infer
P,S,D,G |- decl -| S',D',G'
P' = P,d
P',S',D',G' |- P0 -| P'',S'',D'',G''
------------------------------------[]
P,S,D,G |- decl, P0 -| P'',S'',D'',G''
~

# Dynamic Semantics { #sec-dynamic }

## Expressions

$\langle \zeta, \xi, \sigma, e \Downarrow_e \xi', \sigma', v \rangle$

### Constants

~ Infer

-------------------------------------------------------------------------------[Bool-True]
\langle \zeta, \xi, \sigma, true \rangle \Downarrow_e \langle \xi, \sigma, true \rangle
~

~ Infer

-------------------------------------------------------------------------------[Bool-False]
\langle \zeta, \xi, \sigma, false \rangle \Downarrow_e \langle \xi, \sigma, false \rangle
~

~ Infer

-------------------------------------------------------------------------------[Int-Constant]
\langle \zeta, \xi, \sigma, a \rangle \Downarrow_e \langle \xi, \sigma, a \rangle
~

~ Infer

-------------------------------------------------------------------------------[Unsigned-Int-Constant]
\langle \zeta, \xi, \sigma, nwa \rangle \Downarrow_e \langle \xi, \sigma, (n, a^n) \rangle
~

~ Infer

-------------------------------------------------------------------------------[Signed-Int-Constant]
\langle \zeta, \xi, \sigma, nsa \rangle \Downarrow_e \langle \xi, \sigma, (n, a^n) \rangle
~

~ Infer

-------------------------------------------------------------------------------[String]
\langle \zeta, \xi, \sigma, u \rangle \Downarrow_e \langle \xi, \sigma, u \rangle
~

### Variables

~ Infer
if x = ``verify" then r = x else r = \xi(x)
-------------------------------------------------------------------------------[Var]
\langle \zeta, \xi, \sigma, x \rangle \Downarrow_e \langle \xi, \sigma, r \rangle
~

~ Infer
TODO
-------------------------------------------------------------------------------[Var-Top]
\langle \zeta, \xi, \sigma, .x \rangle \Downarrow_e \langle \xi, \sigma,  \rangle
~

### Accesses

~ Infer
\langle \zeta, \xi, \sigma, e1 \Downarrow_e \xi', \sigma', v1 \rangle
\langle \zeta, \xi', \sigma', e2 \Downarrow_e \xi'', \sigma'', v2 \rangle
i = n1 % v2
v1 = (...,vi,...,n1,n2)
-------------------------------------------------------------------------------[Array-Access]
\langle \zeta, \xi, \sigma, e1[e2] \rangle \Downarrow_e \langle \xi'', \sigma'', vi \rangle
~

<!-- not sure if this is valid -->
~ Infer
\langle \zeta, \xi, \sigma, e1 \Downarrow_e \xi', \sigma', v1 \rangle
\langle \zeta, \xi', \sigma', e2 \Downarrow_e \xi'', \sigma'', v2 \rangle
\langle \zeta, \xi'', \sigma'', e3 \Downarrow_e \xi''', \sigma''', v3 \rangle
w = v2 - v3 + 1
n = v1 \% 2^{v2+1}
if v3 \leq 0 then r = (n_u^w) else r = v1/2[v2-1:v3-1]
-------------------------------------------------------------------------------[Bitslice]
\langle \zeta, \xi, \sigma, e1[e2:e3] \rangle \Downarrow_e \langle \xi''', \sigma''', r \rangle
~

~ Infer
\langle \zeta, \xi, \sigma, e1 \Downarrow_e \xi', \sigma', v1 \rangle
...
\langle \zeta, \xi^{n-1}, \sigma^{n-1}, en \Downarrow_e \xi^n, \sigma^n, vn \rangle
-------------------------------------------------------------------------------[List-Expression]
\langle \zeta, \xi, \sigma, {e1,...,en} \rangle \Downarrow_e \langle \xi^n, \sigma^n, (v1,...,vn) \rangle
~

### Unary Operations

~ Infer
\langle \zeta, \xi, \sigma, e \Downarrow_e \xi', \sigma', v \rangle
\diamond \in \{ !, \texttt{\textasciitilde}, - \}
-------------------------------------------------------------------------------[Unary-Op]
\langle \zeta, \xi, \sigma, \diamond e \rangle \Downarrow_e \langle \xi', \sigma', \diamond v \rangle
~

### Binary Operations

~ Infer
\langle \zeta, \xi, \sigma, e1 \Downarrow_e \xi', \sigma', v1 \rangle
\langle \zeta, \xi', \sigma', e2 \Downarrow_e \xi'', \sigma'', v2 \rangle
\diamond \in \{ +, |+|, -, |-|, *, /, \%, <<, >>, <, >, \leq, \geq, ==, !=, \&, \hat{}, |, ++, \&\&, || \}
-------------------------------------------------------------------------------[Binary-Op]
\langle \zeta, \xi, \sigma, e1 \diamond e2 \rangle \Downarrow_e \langle \xi'', \sigma'', v1 \diamond v2 \rangle
~

### Casts
~ Infer
\langle \zeta, \xi, \sigma, e \Downarrow_e \xi', \sigma', v \rangle
v = n_u^w
w = 1
n = 1
-------------------------------------------------------------------------------[Bool-Cast-True]
\langle \zeta, \xi, \sigma, (bool) e \rangle \Downarrow_e \langle \xi', \sigma', true \rangle
~

~ Infer
\langle \zeta, \xi, \sigma, e \Downarrow_e \xi', \sigma', v \rangle
v = n_u^w
w = 1
n != 1
-------------------------------------------------------------------------------[Bool-Cast-False]
\langle \zeta, \xi, \sigma, (bool) e \rangle \Downarrow_e \langle \xi', \sigma', false \rangle
~

~ Infer
\langle \zeta, \xi, \sigma, e1 \Downarrow_e \xi', \sigma', v1 \rangle
\langle \zeta, \xi', \sigma, e2 \Downarrow_e \xi'', \sigma'', v2 \rangle
v1 = a1 | {a1}_u^{n1} | {a1}_s^{n2}
v2 = a2 | {a2}_u^{n3} | {a2}_s^{n4}
w = a2
n = oftwoscomplement a1 (TODO)
-------------------------------------------------------------------------------[Bit-Cast]
\langle \zeta, \xi, \sigma, (bit<e2>) e1 \rangle \Downarrow_e \langle \xi'', \sigma'', n_u^w \rangle
~

~ Infer
\langle \zeta, \xi, \sigma, e1 \Downarrow_e \xi', \sigma', v1 \rangle
\langle \zeta, \xi', \sigma, e2 \Downarrow_e \xi'', \sigma'', v2 \rangle
v1 = a1 | {a1}_u^{n1} | {a1}_s^{n2}
v2 = a2 | {a2}_u^{n3} | {a2}_s^{n4}
w = a2
n = totwoscomplement a1 (TODO)
-------------------------------------------------------------------------------[Int-Cast]
\langle \zeta, \xi, \sigma, (int<e2>) e1 \rangle \Downarrow_e \langle \xi'', \sigma'', n_s^w \rangle
~

~ Infer
\langle \zeta, \xi, \sigma, e \Downarrow_e \xi', \sigma', v \rangle
-------------------------------------------------------------------------------[TypeName-Cast]
\langle \zeta, \xi, \sigma, (X) e \rangle \Downarrow_e \langle \xi', \sigma', v \rangle
~

### Member Expressions

~ Infer
\xi(X) = @enum X \{...,name,...\}
n = TODO: need name in decl
-------------------------------------------------------------------------------[Type-Member-Enum]
\langle \zeta, \xi, \sigma, X.name \rangle \Downarrow_e \langle \xi, \sigma, n.name \rangle
~

~ Infer
\xi(X) = @enum t X \{m_1,...,m_n\}
m_i = (name, e)
\langle \zeta, \xi, \sigma, e \Downarrow_e \xi', \sigma', v \rangle
v = a_u^w | a_s^w
-------------------------------------------------------------------------------[Type-Member-SEnum]
\langle \zeta, \xi, \sigma, X.name \rangle \Downarrow_e \langle \xi', \sigma', (n.name, v) \rangle
~

~ Infer
\xi(X) = @enum t X \{m_1,...,m_n\}
m_i = (name, e)
\langle \zeta, \xi, \sigma, e \Downarrow_e \xi', \sigma', v \rangle
v = a
v' = TODO: implicit cast
-------------------------------------------------------------------------------[Type-Member-SEnum-Integer]
\langle \zeta, \xi, \sigma, X.name \rangle \Downarrow_e \langle \xi', \sigma', (n.name, v') \rangle
~

<!-- why is it t in the code -->
~ Infer

-------------------------------------------------------------------------------[Error-Member]
\langle \zeta, \xi, \sigma, @error.name \rangle \Downarrow_e \langle \xi, \sigma, @error.name \rangle
~

~ Infer
\langle \zeta, \xi, \sigma, e \Downarrow_e \xi', \sigma', v \rangle
v = @struct \{...,(name, v'),...\}
-------------------------------------------------------------------------------[Struct-Field]
\langle \zeta, \xi, \sigma, e.name \rangle \Downarrow_e \langle \xi', \sigma', v' \rangle
~

~ Infer
\langle \zeta, \xi, \sigma, e \Downarrow_e \xi', \sigma', v \rangle
v = (@header \{ ...,(name, v'),... \}, b)
-------------------------------------------------------------------------------[Header-Field]
\langle \zeta, \xi, \sigma, e.name \rangle \Downarrow_e \langle \xi', \sigma', v' \rangle
~

~ Infer
\langle \zeta, \xi, \sigma, e \Downarrow_e \xi', \sigma', v \rangle
v = (@header \{ ... \}, b)
name = ``isValid"
-------------------------------------------------------------------------------[Header-IsValid-Field]
\langle \zeta, \xi, \sigma, e.name \rangle \Downarrow_e \langle \xi', \sigma', name \rangle
~

~ Infer
\langle \zeta, \xi, \sigma, e \Downarrow_e \xi', \sigma', v \rangle
v = (@header \{ ... \}, b)
name = ``setValid"
-------------------------------------------------------------------------------[Header-SetValid-Field]
\langle \zeta, \xi, \sigma, e.name \rangle \Downarrow_e \langle \xi', \sigma', name \rangle
~

~ Infer
\langle \zeta, \xi, \sigma, e \Downarrow_e \xi', \sigma', v \rangle
v = (@header \{ ... \}, b)
name = ``setInvalid"
-------------------------------------------------------------------------------[Header-SetInvalid-Field]
\langle \zeta, \xi, \sigma, e.name \rangle \Downarrow_e \langle \xi', \sigma', name \rangle
~

~ Infer
\langle \zeta, \xi, \sigma, e \Downarrow_e \xi', \sigma', v \rangle
v = (\mathkw{header\ union} \{ ... \}, v')
-------------------------------------------------------------------------------[Header-Union]
\langle \zeta, \xi, \sigma, e.name \rangle \Downarrow_e \langle \xi', \sigma', v' \rangle
~

~ Infer
\langle \zeta, \xi, \sigma, e \Downarrow_e \xi', \sigma', v \rangle
v = (v1,...,vn, size, next) 
name = ``size"
-------------------------------------------------------------------------------[Array-Size-Field]
\langle \zeta, \xi, \sigma, e.name \rangle \Downarrow_e \langle \xi', \sigma', size_u^{32} \rangle
~

~ Infer
\langle \zeta, \xi, \sigma, e \Downarrow_e \xi', \sigma', v \rangle
v = (v1,...,vn, size, next) 
name = ``next"
next < size
-------------------------------------------------------------------------------[Array-Next-Field]
\langle \zeta, \xi, \sigma, e.name \rangle \Downarrow_e \langle \xi', \sigma', v_{next} \rangle
~

~ Infer
\langle \zeta, \xi, \sigma, e \Downarrow_e \xi', \sigma', v \rangle
v = (v1,...,vn, size, next) 
name = ``last"
1 \leq next \leq size
-------------------------------------------------------------------------------[Array-Last-Field]
\langle \zeta, \xi, \sigma, e.name \rangle \Downarrow_e \langle \xi', \sigma', v_{next} \rangle
~

~ Infer
\langle \zeta, \xi, \sigma, e \Downarrow_e \xi', \sigma', v \rangle
v = (v1,...,vn, size, next)
name = ``lastIndex" 
-------------------------------------------------------------------------------[Array-LastIndex-Field]
\langle \zeta, \xi, \sigma, e.name \rangle \Downarrow_e \langle \xi', \sigma', (next - 1)_u^{32} \rangle
~

~ Infer
\langle \zeta, \xi, \sigma, e \Downarrow_e \xi', \sigma', v \rangle
v = (v1,...,vn, size, next)
name = ``pop_front"
-------------------------------------------------------------------------------[Array-PopFront-Field]
\langle \zeta, \xi, \sigma, e.name \rangle \Downarrow_e \langle \xi', \sigma', name \rangle
~

~ Infer
\langle \zeta, \xi, \sigma, e \Downarrow_e \xi', \sigma', v \rangle
v = (v1,...,vn, size, next) 
name = ``push_front"
-------------------------------------------------------------------------------[Array-PushFront-Field]
\langle \zeta, \xi, \sigma, e.name \rangle \Downarrow_e \langle \xi', \sigma' name \rangle
~

~ Infer
\langle \zeta, \xi, \sigma, e \Downarrow_e \xi', \sigma', v \rangle
v = loc
-------------------------------------------------------------------------------[Runtime]
\langle \zeta, \xi, \sigma, e.name \rangle \Downarrow_e \langle \xi', \sigma', @extern name \rangle
~

~ Infer
\langle \zeta, \xi, \sigma, e \Downarrow_e \xi', \sigma', v \rangle
v = @parser ...
-------------------------------------------------------------------------------[Parser-Field]
\langle \zeta, \xi, \sigma, e.name \rangle \Downarrow_e \langle \xi', \sigma', name \rangle
~

~ Infer
\langle \zeta, \xi, \sigma, e \Downarrow_e \xi', \sigma', v \rangle
v = @control ...
-------------------------------------------------------------------------------[Control-Field]
\langle \zeta, \xi, \sigma, e.name \rangle \Downarrow_e \langle \xi', \sigma', name \rangle
~

~ Infer
\langle \zeta, \xi, \sigma, e \Downarrow_e \xi', \sigma', v \rangle
v = @table ...
-------------------------------------------------------------------------------[Table-Field]
\langle \zeta, \xi, \sigma, e.name \rangle \Downarrow_e \langle \xi', \sigma', name \rangle
~


### Ternary Expression

~ Infer
\langle \zeta, \xi, \sigma, e1 \Downarrow_e \xi', \sigma', v1 \rangle
\langle \zeta, \xi', \sigma', e2 \Downarrow_e \xi'', \sigma'', v2 \rangle
v1 = true
-------------------------------------------------------------------------------[Ternary-Op-True]
\langle \zeta, \xi, \sigma, e1 ? e2 : e3 \rangle \Downarrow_e \langle \xi'', \sigma'', v2 \rangle
~

~ Infer
\langle \zeta, \xi, \sigma, e1 \Downarrow_e \xi', \sigma', v1 \rangle
\langle \zeta, \xi', \sigma', e3 \Downarrow_e \xi'', \sigma'', v3 \rangle
v1 = false
-------------------------------------------------------------------------------[Ternary-Op-False]
\langle \zeta, \xi, \sigma, e1 ? e2 : e3 \rangle \Downarrow_e \langle \xi'', \sigma'', v3 \rangle
~

### Function Calls

~ Infer
TODO
-------------------------------------------------------------------------------[Function-Action]
TODO
~

~ Infer
TODO
-------------------------------------------------------------------------------[isValid]
TODO
~

~ Infer
TODO
-------------------------------------------------------------------------------[setValid]
TODO
~

~ Infer
TODO
-------------------------------------------------------------------------------[setInvalid]
TODO
~

~ Infer
TODO
-------------------------------------------------------------------------------[PopFront]
TODO
~

~ Infer
TODO
-------------------------------------------------------------------------------[PushFront]
TODO
~

~ Infer
TODO
-------------------------------------------------------------------------------[Apply]
TODO
~

TODO: what about extract, emit, length, lookahead, advance, verify? also externfun

### Nameless Instantiation

~ Infer
TODO
-------------------------------------------------------------------------------[Control]
TODO
~

~ Infer
TODO
-------------------------------------------------------------------------------[Parser]
TODO
~

~ Infer
TODO
-------------------------------------------------------------------------------[Package]
TODO
~

### Set Operations

~ Infer
\langle \zeta, \xi, \sigma, e1 \Downarrow_e \xi', \sigma', v1 \rangle
\langle \zeta, \xi', \sigma, e2 \Downarrow_e \xi'', \sigma'', v2 \rangle
-------------------------------------------------------------------------------[Masks]
\langle \zeta, \xi, \sigma, e1 \texttt{\&\&\&} e2 \rangle \Downarrow_e \langle \xi'', \sigma'', v1 \texttt{\&\&\&} v2 \rangle
~

~ Infer
\langle \zeta, \xi, \sigma, e1 \Downarrow_e \xi', \sigma', v1 \rangle
\langle \zeta, \xi', \sigma, e2 \Downarrow_e \xi'', \sigma'', v2 \rangle
-------------------------------------------------------------------------------[Ranges]
\langle \zeta, \xi, \sigma, e1 \mathbin{..} e2 \rangle \Downarrow_e \langle \xi'', \sigma'', v1 \mathbin{..} v2 \rangle
~

## Statements
